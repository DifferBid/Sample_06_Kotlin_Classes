
package org.example

/** Перечисления в Kotlin объявляются с использованием ключевого слова enum перед class.
 *  Каждый элемент перечисления является экземпляром самого перечисления и, по сути, константой.
 */

/**-----Example 01 / 02 -----*/
enum class Day {
    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
}

/** Каждый элемент перечисления имеет свой порядковый номер (ordinal) и имя (name).
 *  Порядковый номер начинается с 0 и соответствует порядку объявления элементов.
 */

/**-----Example 03-----*/
// Перечисление для документов собаки: усы, лапы, хвост
// Ключевое слово enum используется перед class для обозначения перечисления
enum class DogDocument {
    VIBRISSAE, // Усы
    PAWS,      // Лапы
    TAIL       // Хвост
}

fun main() {

    /**-----Example 01-----*/
    val day1 = Day.MONDAY
    println(day1.ordinal)  // Вывод 0
    println(day1.name)  // Вывод "MONDAY"
    val day2 = Day.TUESDAY
    println(day2.ordinal)  // Вывод 1
    println(day2.name)  // Вывод "TUESDAY"

    /**-----Example 02-----*/
    // В Kotlin, чтобы получить определенный элемент перечисления по его порядковому номеру (ordinal),
    // можно использовать метод values() и доступ по индексу. Например, чтобы получить второй элемент перечисления
    // (с индексом 1, так как нумерация начинается с нуля), можно сделать следующее

    // Получение всех элементов перечисления Day
    val allDays = Day.values()
    // Получение второго элемента (с индексом 1)
    val secondDay = allDays[1]
    // Вывод второго элемента
    println("Second day: ${secondDay.name}, ordinal: ${secondDay.ordinal}") // Вывод Second day: TUESDAY, ordinal: 1
    // В этом примере allDays[1] вернет элемент TUESDAY, так как это второй элемент в перечислении (индекс 1).
    // Соответственно, для получения других элементов можно использовать соответствующий индекс.
    // Таким образом, чтобы получить элемент перечисления по его порядковому номеру, достаточно использовать метод values() и обращаться к элементу массива по индексу.

    /**-----Example 03-----*/
    // Создание переменной paws, которая содержит элемент перечисления DogDocument.PAWS
    val paws = DogDocument.PAWS
    println(paws) // Вывод PAWS

    // Получение всех значений перечисления DogDocument
    // Метод values() возвращает массив всех констант в порядке их объявления
    for (documentPart in DogDocument.values()) {
        // Выводим имя и порядковый номер каждого элемента перечисления
        println("name: ${documentPart.name}, ordinal: ${documentPart.ordinal}")
        // Вывод
        // name: VIBRISSAE, ordinal: 0
        // name: PAWS, ordinal: 1
        // name: TAIL, ordinal: 2

       /** Перечисления в Kotlin объявляются с помощью ключевого слова enum перед class.
       * Каждый элемент перечисления является экземпляром самого перечисления и может иметь свойства и методы.
       * Переменная paws содержит элемент DogDocument.PAWS и выводится на экран.
       * Метод values() позволяет получить массив всех элементов перечисления.
       * Свойство name возвращает имя константы, а свойство ordinal — ее порядковый номер (начиная с 0).
       */
    }
}


