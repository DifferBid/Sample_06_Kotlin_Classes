
package org.example

/**-----Example 01-----*/
// Определение enum-класса DayS03, представляющего дни недели и информацию, является ли день выходным.
enum class DayS03(val isWeekend: Boolean) {
    // Каждый день недели представлен с указанием, является ли он выходным (isWeekend).
    MONDAY(false),    // Понедельник, не выходной
    TUESDAY(false),   // Вторник, не выходной
    WEDNESDAY(false), // Среда, не выходной
    THURSDAY(false),  // Четверг, не выходной
    FRIDAY(false),    // Пятница, не выходной
    SATURDAY(true),   // Суббота, выходной
    SUNDAY(true);     // Воскресенье, выходной

    // Метод nextDay возвращает следующий день недели.
    fun nextDay(): DayS03 {
        // Проверяем, если текущий день не последний в перечислении.
        return if (this.ordinal < Day.values().lastIndex) {
            // Возвращаем следующий день в списке значений enum.
            DayS03.values()[this.ordinal + 1]
        } else {
            // Если текущий день последний (воскресенье), возвращаем первый день (понедельник).
            DayS03.values()[0]
        }
    }

    //  Функция,определяющая выходной день, возвращает true / false
    fun isDayWeekend(): Boolean {
        return this == SATURDAY || this == SUNDAY
    }
}
// Enum-класс DayS03:
// Этот класс представляет дни недели с дополнительной информацией о том, является ли день выходным.
// Для этого используется булевый параметр isWeekend.
// Элементы перечисления:
// Каждый элемент перечисления (день недели) имеет значение isWeekend, которое указывает, является ли этот день выходным.
// Для будних дней (с понедельника по пятницу) isWeekend установлено в false, для выходных (суббота и воскресенье) — в true.
// Метод nextDay:
// Этот метод возвращает следующий день недели.
// Используется свойство ordinal, которое представляет собой порядковый номер текущего элемента в перечислении.
// Day.values() возвращает массив всех значений перечисления, а lastIndex - индекс последнего элемента.
// Если текущий день не последний в списке, метод возвращает следующий день.
// Если текущий день — воскресенье, метод возвращает понедельник (начало недели).
// Использование класса Day:
// В примере создается переменная day, которая хранит значение Day.FRIDAY.
// Сначала выводится, является ли пятница выходным (isWeekend).
// Затем выводится следующий день после пятницы с помощью метода nextDay, который возвращает Day.SATURDAY.
// Этот пример демонстрирует, как можно использовать перечисления в Kotlin для хранения и обработки данных о днях недели,
// а также как можно добавить методы в enum-класс для расширенной функциональности.

/**-----Example 02-----*/
enum class Color(
    val r: Int, val g: Int, val b: Int
) {
    // Определение цветов с их компонентами RGB
    RED(255, 0, 0),
    ORANGE(255, 165, 0),
    YELLOW(255, 255, 0),
    GREEN(0, 255, 0),
    BLUE(0, 0, 255),
    INDIGO(75, 0, 130),
    VIOLET(238, 130, 238);

    // Метод для получения RGB значения в виде целого числа
    fun rgb() = (r * 256 + g) * 256 + b
    // Формула, используемая в методе rgb(), преобразует три компонента цвета (красный r, зелёный g и синий b)
    // в одно целое число. Это целое число представляет собой цвет в формате RGB, где каждый цветовой канал занимает 8 бит (1 байт).
}
    // Перечисление Color:
    // Каждое значение перечисления представляет цвет с соответствующими компонентами RGB.
    // Например, цвет RED имеет компоненты (255, 0, 0).
    // Метод rgb():
    // Этот метод вычисляет числовое значение RGB цвета. Он комбинирует значения компонентов r, g и b в одно целое число.
    // Формула (r * 256 + g) * 256 + b преобразует RGB-компоненты в единственное число.

fun main() {
    /**-----Example 01-----*/
    // Пример использования перечисления Day и метода nextDay.
    val day = DayS03.FRIDAY
    println(day.isWeekend) // false, так как пятница не выходной
    println(day.nextDay()) // SATURDAY, следующий день после пятницы - суббота
    println(day.isDayWeekend()) // false
    println(printDayType(day)) // FRIDAY is a weekday

    /**-----Example 02-----*/
    // Вывод RGB значения для цвета BLUE
    println(Color.BLUE.rgb())  // Output: 255
}

/**-----Example 01-----*/
fun printDayType(day: DayS03) {
    if (day.isDayWeekend()) {
        println("$day is a weekend day.")
    } else {
        println("$day is a weekday.")
    }
}